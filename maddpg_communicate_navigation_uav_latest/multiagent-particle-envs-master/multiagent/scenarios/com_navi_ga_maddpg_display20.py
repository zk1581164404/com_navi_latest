from dis import dis
from sqlite3 import connect
import numpy as np
from multiagent.core import World, Agent, Landmark
from multiagent.scenario import BaseScenario
import random
from multiagent.scenarios.Locator import Locator #奇怪  必须要绝对路径
import math
from numpy.random import default_rng
import json
import copy

#不同阶段  不同速度   不同阶段的话 用类似状态机的转移即可
#todo 加上到达success的时间
#先搞定一下输入吧 
#地图是 -1*1 --> 500*500  相当于乘250 + 250
#出结果的时候考虑一下距离  尤其是前几组数据  宁愿迟一点交
#先从最简单的  不更变角色开始部署吧
#开始处理输出问题

class NpEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        else:
            return super(NpEncoder, self).default(obj)


class Scenario(BaseScenario): #在reset的时候 修改用户比例
    user_location = '[{"user_location": [[51.0, 230.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]}, {"user_location": [[53.0, 234.0], [182.0, 192.0], [138.0, 224.0], [136.0, 271.0], [211.0, 308.0], [202.0, 355.0], [215.0, 438.0], [180.0, 203.0], [90.0, 391.0], [78.0, 287.0], [265.0, 324.0], [343.0, 415.0], [207.0, 263.0], [178.0, 55.0], [330.0, 366.0], [73.0, 360.0], [146.0, 144.0], [183.0, 353.0], [384.0, 435.0], [433.0, 267.0]]}, {"user_location": [[54.0, 236.0], [185.0, 195.0], [138.0, 230.0], [138.0, 275.0], [212.0, 309.0], [202.0, 355.0], [215.0, 436.0], [183.0, 203.0], [91.0, 391.0], [78.0, 287.0], [265.0, 335.0], [343.0, 393.0], [207.0, 263.0], [173.0, 58.0], [325.0, 365.0], [73.0, 376.0], [157.0, 144.0], [194.0, 353.0], [372.0, 423.0], [433.0, 267.0]]}, {"user_location": [[60.0, 236.0], [194.0, 204.0], [138.0, 246.0], [141.0, 281.0], [215.0, 312.0], [202.0, 355.0], [215.0, 430.0], [191.0, 203.0], [94.0, 391.0], [78.0, 287.0], [265.0, 344.0], [343.0, 375.0], [227.0, 263.0], [162.0, 67.0], [315.0, 365.0], [73.0, 376.0], [165.0, 144.0], [210.0, 353.0], [362.0, 413.0], [433.0, 267.0]]}, {"user_location": [[78.0, 236.0], [200.0, 210.0], [138.0, 256.0], [149.0, 297.0], [223.0, 320.0], [202.0, 355.0], [215.0, 414.0], [197.0, 203.0], [102.0, 391.0], [78.0, 287.0], [265.0, 351.0], [343.0, 369.0], [243.0, 263.0], [153.0, 58.0], [308.0, 365.0], [73.0, 376.0], [171.0, 144.0], [220.0, 353.0], [355.0, 406.0], [433.0, 267.0]]}, {"user_location": [[92.0, 236.0], [212.0, 222.0], [138.0, 276.0], [155.0, 309.0], [228.0, 325.0], [202.0, 355.0], [215.0, 402.0], [208.0, 203.0], [107.0, 391.0], [78.0, 287.0], [270.0, 356.0], [343.0, 365.0], [253.0, 263.0], [147.0, 52.0], [303.0, 365.0], [73.0, 376.0], [183.0, 144.0], [240.0, 353.0], [343.0, 394.0], [433.0, 267.0]]}, {"user_location": [[102.0, 236.0], [222.0, 232.0], [138.0, 290.0], [167.0, 333.0], [238.0, 335.0], [202.0, 354.0], [215.0, 380.0], [216.0, 203.0], [117.0, 391.0], [78.0, 287.0], [280.0, 365.0], [323.0, 355.0], [273.0, 263.0], [135.0, 56.0], [292.0, 365.0], [73.0, 376.0], [192.0, 144.0], [256.0, 353.0], [333.0, 384.0], [433.0, 267.0]]}, {"user_location": [[112.0, 246.0], [230.0, 240.0], [138.0, 314.0], [187.0, 333.0], [245.0, 342.0], [202.0, 354.0], [215.0, 362.0], [221.0, 203.0], [125.0, 391.0], [78.0, 287.0], [287.0, 365.0], [309.0, 355.0], [289.0, 263.0], [125.0, 57.0], [287.0, 365.0], [73.0, 376.0], [199.0, 144.0], [268.0, 353.0], [325.0, 376.0], [433.0, 267.0]]}, {"user_location": [[120.0, 254.0], [235.0, 250.0], [138.0, 332.0], [203.0, 333.0], [257.0, 354.0], [202.0, 354.0], [215.0, 359.0], [232.0, 203.0], [131.0, 391.0], [84.0, 287.0], [287.0, 365.0], [299.0, 355.0], [293.0, 263.0], [117.0, 55.0], [281.0, 371.0], [73.0, 376.0], [204.0, 144.0], [290.0, 353.0], [320.0, 371.0], [433.0, 267.0]]}, {"user_location": [[126.0, 260.0], [246.0, 272.0], [138.0, 344.0], [213.0, 333.0], [266.0, 363.0], [202.0, 354.0], [215.0, 353.0], [241.0, 203.0], [143.0, 391.0], [95.0, 287.0], [287.0, 365.0], [277.0, 354.0], [299.0, 263.0], [111.0, 52.0], [276.0, 376.0], [73.0, 377.0], [215.0, 144.0], [295.0, 353.0], [298.0, 376.0], [433.0, 279.0]]}, {"user_location": [[138.0, 272.0], [255.0, 290.0], [138.0, 368.0], [235.0, 333.0], [272.0, 365.0], [202.0, 354.0], [215.0, 353.0], [248.0, 203.0], [152.0, 391.0], [104.0, 287.0], [287.0, 365.0], [277.0, 354.0], [299.0, 263.0], [100.0, 51.0], [276.0, 376.0], [73.0, 377.0], [223.0, 144.0], [295.0, 353.0], [282.0, 376.0], [433.0, 289.0]]}, {"user_location": [[148.0, 282.0], [262.0, 304.0], [138.0, 375.0], [251.0, 333.0], [284.0, 365.0], [202.0, 354.0], [222.0, 353.0], [253.0, 203.0], [158.0, 391.0], [110.0, 287.0], [287.0, 365.0], [277.0, 354.0], [299.0, 263.0], [91.0, 67.0], [276.0, 376.0], [73.0, 377.0], [228.0, 144.0], [298.0, 353.0], [282.0, 376.0], [433.0, 296.0]]}, {"user_location": [[156.0, 290.0], [274.0, 328.0], [138.0, 375.0], [261.0, 333.0], [287.0, 365.0], [202.0, 354.0], [234.0, 353.0], [264.0, 203.0], [169.0, 391.0], [121.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 263.0], [84.0, 60.0], [276.0, 376.0], [73.0, 377.0], [239.0, 144.0], [298.0, 353.0], [277.0, 376.0], [433.0, 301.0]]}, {"user_location": [[161.0, 295.0], [284.0, 348.0], [138.0, 375.0], [281.0, 333.0], [287.0, 365.0], [202.0, 354.0], [243.0, 353.0], [273.0, 203.0], [178.0, 391.0], [129.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 263.0], [84.0, 55.0], [276.0, 376.0], [73.0, 377.0], [247.0, 144.0], [298.0, 353.0], [277.0, 376.0], [433.0, 312.0]]}, {"user_location": [[172.0, 306.0], [295.0, 348.0], [138.0, 376.0], [295.0, 333.0], [287.0, 365.0], [202.0, 354.0], [250.0, 353.0], [279.0, 203.0], [185.0, 391.0], [134.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 263.0], [84.0, 66.0], [276.0, 376.0], [73.0, 377.0], [252.0, 144.0], [299.0, 353.0], [277.0, 376.0], [433.0, 320.0]]}, {"user_location": [[180.0, 314.0], [295.0, 348.0], [138.0, 376.0], [295.0, 333.0], [287.0, 365.0], [202.0, 353.0], [255.0, 353.0], [287.0, 203.0], [190.0, 391.0], [144.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 263.0], [84.0, 58.0], [276.0, 376.0], [73.0, 377.0], [262.0, 144.0], [299.0, 353.0], [276.0, 376.0], [433.0, 326.0]]}, {"user_location": [[185.0, 319.0], [298.0, 348.0], [138.0, 376.0], [299.0, 333.0], [287.0, 365.0], [202.0, 353.0], [265.0, 353.0], [287.0, 203.0], [200.0, 391.0], [151.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 263.0], [84.0, 53.0], [276.0, 376.0], [73.0, 359.0], [269.0, 144.0], [299.0, 353.0], [276.0, 376.0], [433.0, 338.0]]}, {"user_location": [[195.0, 329.0], [298.0, 348.0], [138.0, 376.0], [299.0, 333.0], [287.0, 365.0], [202.0, 353.0], [273.0, 353.0], [287.0, 203.0], [208.0, 391.0], [163.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 263.0], [84.0, 63.0], [276.0, 376.0], [73.0, 358.0], [274.0, 144.0], [299.0, 353.0], [276.0, 376.0], [433.0, 347.0]]}, {"user_location": [[202.0, 336.0], [298.0, 348.0], [138.0, 376.0], [299.0, 333.0], [287.0, 365.0], [202.0, 353.0], [279.0, 353.0], [287.0, 203.0], [214.0, 391.0], [173.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 268.0], [84.0, 63.0], [276.0, 376.0], [73.0, 353.0], [284.0, 144.0], [299.0, 353.0], [276.0, 376.0], [433.0, 354.0]]}, {"user_location": [[214.0, 348.0], [299.0, 348.0], [138.0, 376.0], [299.0, 333.0], [287.0, 365.0], [202.0, 353.0], [287.0, 353.0], [296.0, 203.0], [226.0, 391.0], [180.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 279.0], [84.0, 63.0], [275.0, 377.0], [73.0, 353.0], [287.0, 144.0], [299.0, 353.0], [276.0, 376.0], [433.0, 359.0]]}, {"user_location": [[224.0, 358.0], [299.0, 348.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [202.0, 353.0], [287.0, 353.0], [296.0, 203.0], [236.0, 391.0], [185.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 287.0], [84.0, 63.0], [275.0, 377.0], [73.0, 353.0], [287.0, 149.0], [299.0, 353.0], [276.0, 376.0], [433.0, 365.0]]}, {"user_location": [[231.0, 365.0], [299.0, 348.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [202.0, 353.0], [287.0, 353.0], [298.0, 203.0], [244.0, 391.0], [196.0, 287.0], [287.0, 365.0], [275.0, 353.0], [299.0, 292.0], [84.0, 63.0], [275.0, 377.0], [73.0, 353.0], [287.0, 160.0], [299.0, 353.0], [276.0, 376.0], [433.0, 365.0]]}, {"user_location": [[236.0, 365.0], [299.0, 348.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [202.0, 353.0], [287.0, 353.0], [298.0, 203.0], [256.0, 379.0], [205.0, 287.0], [287.0, 365.0], [286.0, 353.0], [299.0, 303.0], [84.0, 63.0], [275.0, 377.0], [73.0, 353.0], [279.0, 176.0], [299.0, 353.0], [276.0, 376.0], [423.0, 370.0]]}, {"user_location": [[246.0, 365.0], [299.0, 348.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [202.0, 353.0], [287.0, 353.0], [298.0, 203.0], [280.0, 355.0], [212.0, 287.0], [287.0, 365.0], [287.0, 353.0], [299.0, 312.0], [84.0, 63.0], [275.0, 377.0], [73.0, 353.0], [279.0, 186.0], [299.0, 353.0], [276.0, 376.0], [403.0, 375.0]]}, {"user_location": [[254.0, 365.0], [299.0, 348.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [208.0, 353.0], [287.0, 353.0], [298.0, 203.0], [297.0, 355.0], [224.0, 287.0], [287.0, 365.0], [287.0, 353.0], [299.0, 319.0], [84.0, 63.0], [275.0, 377.0], [73.0, 353.0], [277.0, 206.0], [299.0, 353.0], [276.0, 376.0], [389.0, 375.0]]}, {"user_location": [[259.0, 365.0], [299.0, 348.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [219.0, 353.0], [287.0, 353.0], [298.0, 203.0], [297.0, 355.0], [234.0, 287.0], [287.0, 365.0], [287.0, 353.0], [299.0, 331.0], [84.0, 63.0], [275.0, 377.0], [85.0, 353.0], [277.0, 220.0], [299.0, 361.0], [287.0, 376.0], [379.0, 375.0]]}, {"user_location": [[270.0, 365.0], [299.0, 348.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [228.0, 353.0], [287.0, 353.0], [298.0, 203.0], [297.0, 355.0], [241.0, 287.0], [287.0, 365.0], [287.0, 353.0], [299.0, 340.0], [84.0, 63.0], [275.0, 377.0], [95.0, 353.0], [275.0, 244.0], [299.0, 365.0], [287.0, 376.0], [357.0, 376.0]]}, {"user_location": [[278.0, 365.0], [290.0, 357.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [235.0, 353.0], [287.0, 353.0], [298.0, 203.0], [298.0, 354.0], [246.0, 287.0], [287.0, 365.0], [287.0, 353.0], [299.0, 347.0], [84.0, 63.0], [275.0, 377.0], [102.0, 353.0], [275.0, 262.0], [299.0, 365.0], [287.0, 376.0], [339.0, 376.0]]}, {"user_location": [[284.0, 365.0], [287.0, 364.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [240.0, 353.0], [287.0, 353.0], [298.0, 203.0], [298.0, 354.0], [256.0, 287.0], [287.0, 365.0], [287.0, 353.0], [299.0, 359.0], [77.0, 70.0], [275.0, 377.0], [107.0, 353.0], [282.0, 276.0], [299.0, 365.0], [287.0, 376.0], [325.0, 376.0]]}, {"user_location": [[287.0, 365.0], [287.0, 365.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [251.0, 353.0], [287.0, 353.0], [298.0, 203.0], [298.0, 354.0], [263.0, 287.0], [287.0, 365.0], [287.0, 353.0], [299.0, 365.0], [72.0, 75.0], [275.0, 377.0], [118.0, 353.0], [287.0, 286.0], [299.0, 365.0], [287.0, 376.0], [315.0, 376.0]]}, {"user_location": [[287.0, 365.0], [287.0, 365.0], [138.0, 377.0], [299.0, 333.0], [287.0, 365.0], [259.0, 361.0], [287.0, 353.0], [299.0, 203.0], [299.0, 353.0], [268.0, 287.0], [287.0, 365.0], [287.0, 353.0], [285.0, 358.0], [62.0, 85.0], [275.0, 377.0], [127.0, 353.0], [287.0, 306.0], [299.0, 365.0], [281.0, 364.0], [295.0, 376.0]]}, {"user_location": [[287.0, 365.0], [287.0, 365.0], [138.0, 377.0], [288.0, 344.0], [287.0, 365.0], [264.0, 365.0], [287.0, 353.0], [299.0, 203.0], [299.0, 353.0], [278.0, 287.0], [278.0, 374.0], [287.0, 353.0], [275.0, 353.0], [54.0, 93.0], [283.0, 377.0], [133.0, 353.0], [287.0, 320.0], [299.0, 365.0], [276.0, 354.0], [279.0, 376.0]]}, {"user_location": [[287.0, 365.0], [287.0, 365.0], [138.0, 377.0], [287.0, 352.0], [287.0, 365.0], [274.0, 365.0], [281.0, 359.0], [299.0, 203.0], [299.0, 353.0], [285.0, 287.0], [278.0, 374.0], [287.0, 353.0], [275.0, 353.0], [63.0, 98.0], [287.0, 377.0], [144.0, 353.0], [287.0, 344.0], [293.0, 371.0], [276.0, 354.0], [279.0, 376.0]]}, {"user_location": [[287.0, 365.0], [287.0, 365.0], [138.0, 377.0], [287.0, 357.0], [287.0, 365.0], [282.0, 365.0], [276.0, 365.0], [299.0, 203.0], [299.0, 353.0], [287.0, 287.0], [275.0, 377.0], [287.0, 353.0], [275.0, 353.0], [53.0, 108.0], [287.0, 377.0], [153.0, 353.0], [287.0, 364.0], [287.0, 377.0], [276.0, 354.0], [275.0, 377.0]]}, {"user_location": [[287.0, 365.0], [287.0, 365.0], [138.0, 377.0], [287.0, 376.0], [287.0, 365.0], [287.0, 365.0], [276.0, 365.0], [299.0, 203.0], [299.0, 353.0], [287.0, 287.0], [275.0, 377.0], [287.0, 353.0], [275.0, 353.0], [67.0, 115.0], [287.0, 377.0], [159.0, 353.0], [287.0, 373.0], [287.0, 377.0], [276.0, 354.0], [284.0, 377.0]]}, {"user_location": [[287.0, 365.0], [287.0, 365.0], [138.0, 377.0], [287.0, 376.0], [287.0, 365.0], [287.0, 365.0], [276.0, 365.0], [299.0, 203.0], [299.0, 353.0], [287.0, 287.0], [275.0, 377.0], [287.0, 353.0], [275.0, 353.0], [62.0, 120.0], [287.0, 377.0], [171.0, 365.0], [287.0, 373.0], [287.0, 377.0], [276.0, 354.0], [287.0, 377.0]]}, {"user_location": [[287.0, 365.0], [287.0, 365.0], [138.0, 377.0], [287.0, 376.0], [287.0, 365.0], [287.0, 365.0], [275.0, 365.0], [299.0, 203.0], [299.0, 353.0], [287.0, 287.0], [275.0, 377.0], [287.0, 353.0], [275.0, 353.0], [72.0, 140.0], [287.0, 377.0], [180.0, 365.0], [287.0, 376.0], [287.0, 377.0], [276.0, 354.0], [299.0, 353.0]]}, {"user_location": [[287.0, 372.0], [287.0, 365.0], [138.0, 377.0], [287.0, 376.0], [287.0, 365.0], [287.0, 365.0], [275.0, 365.0], [299.0, 203.0], [279.0, 363.0], [287.0, 287.0], [275.0, 377.0], [287.0, 353.0], [275.0, 353.0], [80.0, 156.0], [287.0, 377.0], [187.0, 365.0], [287.0, 376.0], [287.0, 377.0], [299.0, 353.0], [299.0, 353.0]]}, {"user_location": [[287.0, 372.0], [287.0, 365.0], [138.0, 377.0], [287.0, 376.0], [287.0, 365.0], [282.0, 370.0], [275.0, 365.0], [299.0, 203.0], [279.0, 365.0], [287.0, 287.0], [285.0, 377.0], [287.0, 353.0], [275.0, 353.0], [86.0, 168.0], [287.0, 377.0], [199.0, 365.0], [287.0, 376.0], [287.0, 377.0], [299.0, 353.0], [299.0, 353.0]]}, {"user_location": [[287.0, 376.0], [287.0, 365.0], [138.0, 377.0], [287.0, 376.0], [287.0, 365.0], [277.0, 375.0], [275.0, 365.0], [299.0, 203.0], [279.0, 365.0], [287.0, 287.0], [287.0, 377.0], [287.0, 353.0], [275.0, 353.0], [98.0, 192.0], [287.0, 377.0], [209.0, 375.0], [287.0, 377.0], [287.0, 377.0], [292.0, 360.0], [299.0, 353.0]]}, {"user_location": [[287.0, 376.0], [287.0, 365.0], [144.0, 377.0], [287.0, 376.0], [287.0, 365.0], [277.0, 375.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [287.0, 287.0], [287.0, 377.0], [287.0, 353.0], [275.0, 353.0], [108.0, 212.0], [287.0, 377.0], [216.0, 375.0], [287.0, 377.0], [287.0, 377.0], [287.0, 365.0], [299.0, 353.0]]}, {"user_location": [[287.0, 376.0], [287.0, 365.0], [144.0, 355.0], [287.0, 376.0], [280.0, 372.0], [282.0, 375.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [279.0, 295.0], [287.0, 377.0], [287.0, 353.0], [286.0, 353.0], [115.0, 226.0], [287.0, 377.0], [221.0, 375.0], [281.0, 365.0], [287.0, 377.0], [287.0, 365.0], [299.0, 353.0]]}, {"user_location": [[287.0, 377.0], [287.0, 365.0], [144.0, 355.0], [293.0, 364.0], [280.0, 372.0], [298.0, 354.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [279.0, 301.0], [287.0, 377.0], [287.0, 353.0], [287.0, 353.0], [120.0, 236.0], [287.0, 377.0], [231.0, 375.0], [276.0, 354.0], [282.0, 367.0], [287.0, 365.0], [299.0, 358.0]]}, {"user_location": [[287.0, 377.0], [287.0, 365.0], [144.0, 355.0], [299.0, 353.0], [277.0, 375.0], [298.0, 354.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [276.0, 312.0], [287.0, 377.0], [287.0, 353.0], [294.0, 353.0], [130.0, 256.0], [287.0, 377.0], [239.0, 375.0], [276.0, 354.0], [277.0, 355.0], [287.0, 365.0], [299.0, 365.0]]}, {"user_location": [[287.0, 377.0], [287.0, 365.0], [144.0, 353.0], [299.0, 353.0], [277.0, 375.0], [298.0, 354.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [276.0, 321.0], [287.0, 377.0], [287.0, 353.0], [287.0, 365.0], [138.0, 272.0], [287.0, 377.0], [245.0, 375.0], [276.0, 354.0], [277.0, 355.0], [287.0, 365.0], [299.0, 365.0]]}, {"user_location": [[287.0, 377.0], [287.0, 365.0], [154.0, 353.0], [299.0, 353.0], [275.0, 377.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [276.0, 328.0], [287.0, 377.0], [281.0, 359.0], [287.0, 365.0], [143.0, 282.0], [287.0, 377.0], [256.0, 376.0], [287.0, 353.0], [277.0, 355.0], [287.0, 365.0], [299.0, 365.0]]}, {"user_location": [[287.0, 377.0], [287.0, 365.0], [168.0, 353.0], [299.0, 353.0], [275.0, 377.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [275.0, 340.0], [287.0, 377.0], [276.0, 365.0], [287.0, 365.0], [153.0, 302.0], [287.0, 377.0], [264.0, 376.0], [287.0, 353.0], [287.0, 355.0], [287.0, 365.0], [299.0, 365.0]]}, {"user_location": [[287.0, 377.0], [287.0, 365.0], [192.0, 353.0], [299.0, 353.0], [275.0, 377.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [275.0, 349.0], [287.0, 377.0], [276.0, 365.0], [287.0, 365.0], [160.0, 316.0], [287.0, 377.0], [270.0, 376.0], [293.0, 353.0], [287.0, 355.0], [287.0, 365.0], [299.0, 365.0]]}, {"user_location": [[287.0, 377.0], [287.0, 365.0], [210.0, 353.0], [299.0, 353.0], [275.0, 377.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [275.0, 356.0], [287.0, 377.0], [276.0, 365.0], [287.0, 365.0], [165.0, 326.0], [287.0, 377.0], [281.0, 376.0], [298.0, 353.0], [287.0, 355.0], [287.0, 365.0], [299.0, 365.0]]}, {"user_location": [[287.0, 377.0], [287.0, 365.0], [222.0, 353.0], [299.0, 353.0], [275.0, 377.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [276.0, 365.0], [275.0, 365.0], [287.0, 377.0], [276.0, 365.0], [279.0, 373.0], [175.0, 346.0], [287.0, 377.0], [287.0, 376.0], [298.0, 353.0], [287.0, 354.0], [287.0, 365.0], [299.0, 365.0]]}, {"user_location": [[278.0, 359.0], [287.0, 365.0], [246.0, 353.0], [299.0, 353.0], [275.0, 377.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [275.0, 365.0], [284.0, 365.0], [287.0, 377.0], [276.0, 365.0], [279.0, 373.0], [183.0, 362.0], [287.0, 377.0], [287.0, 376.0], [298.0, 353.0], [287.0, 354.0], [287.0, 365.0], [283.0, 357.0]]}, {"user_location": [[278.0, 359.0], [287.0, 365.0], [266.0, 353.0], [299.0, 353.0], [281.0, 365.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [275.0, 365.0], [287.0, 365.0], [287.0, 377.0], [276.0, 365.0], [276.0, 376.0], [188.0, 370.0], [287.0, 377.0], [287.0, 376.0], [299.0, 353.0], [287.0, 354.0], [287.0, 365.0], [282.0, 357.0]]}, {"user_location": [[276.0, 354.0], [287.0, 365.0], [282.0, 353.0], [287.0, 365.0], [287.0, 353.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [275.0, 365.0], [287.0, 365.0], [287.0, 377.0], [275.0, 377.0], [276.0, 376.0], [198.0, 375.0], [287.0, 353.0], [287.0, 376.0], [299.0, 353.0], [287.0, 354.0], [279.0, 373.0], [276.0, 354.0]]}, {"user_location": [[276.0, 354.0], [287.0, 365.0], [293.0, 353.0], [287.0, 365.0], [287.0, 353.0], [299.0, 353.0], [275.0, 365.0], [299.0, 203.0], [275.0, 365.0], [287.0, 365.0], [287.0, 377.0], [275.0, 377.0], [276.0, 376.0], [205.0, 375.0], [287.0, 353.0], [287.0, 377.0], [299.0, 353.0], [287.0, 354.0], [285.0, 361.0], [276.0, 354.0]]}, {"user_location": [[276.0, 354.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [287.0, 353.0], [299.0, 365.0], [275.0, 365.0], [299.0, 203.0], [275.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 377.0], [276.0, 376.0], [217.0, 377.0], [287.0, 353.0], [287.0, 377.0], [299.0, 353.0], [287.0, 354.0], [287.0, 353.0], [276.0, 354.0]]}, {"user_location": [[276.0, 354.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [287.0, 353.0], [299.0, 365.0], [275.0, 365.0], [299.0, 203.0], [275.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 377.0], [276.0, 376.0], [226.0, 377.0], [287.0, 353.0], [287.0, 361.0], [299.0, 353.0], [287.0, 354.0], [287.0, 353.0], [276.0, 354.0]]}, {"user_location": [[276.0, 354.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [287.0, 353.0], [299.0, 365.0], [275.0, 365.0], [299.0, 203.0], [275.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 377.0], [276.0, 376.0], [232.0, 377.0], [287.0, 353.0], [287.0, 359.0], [299.0, 353.0], [287.0, 354.0], [287.0, 353.0], [276.0, 354.0]]}, {"user_location": [[276.0, 354.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [287.0, 353.0], [299.0, 365.0], [275.0, 365.0], [299.0, 203.0], [275.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 377.0], [276.0, 376.0], [243.0, 377.0], [287.0, 353.0], [287.0, 354.0], [299.0, 353.0], [287.0, 354.0], [287.0, 353.0], [276.0, 354.0]]}, {"user_location": [[275.0, 353.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [287.0, 353.0], [299.0, 365.0], [275.0, 365.0], [299.0, 215.0], [275.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 377.0], [276.0, 376.0], [251.0, 377.0], [287.0, 353.0], [287.0, 354.0], [299.0, 353.0], [287.0, 354.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[275.0, 353.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [287.0, 362.0], [299.0, 365.0], [275.0, 365.0], [299.0, 224.0], [275.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 377.0], [276.0, 376.0], [257.0, 377.0], [287.0, 353.0], [287.0, 354.0], [299.0, 353.0], [287.0, 354.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[275.0, 353.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [287.0, 365.0], [299.0, 365.0], [275.0, 365.0], [299.0, 230.0], [275.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 377.0], [276.0, 376.0], [268.0, 377.0], [287.0, 353.0], [287.0, 359.0], [299.0, 353.0], [287.0, 354.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[275.0, 353.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [287.0, 365.0], [299.0, 365.0], [275.0, 365.0], [288.0, 252.0], [275.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 377.0], [276.0, 376.0], [276.0, 377.0], [287.0, 353.0], [287.0, 365.0], [299.0, 363.0], [287.0, 354.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[275.0, 353.0], [287.0, 365.0], [299.0, 353.0], [287.0, 365.0], [297.0, 365.0], [299.0, 365.0], [275.0, 365.0], [287.0, 268.0], [275.0, 365.0], [287.0, 365.0], [287.0, 360.0], [275.0, 365.0], [276.0, 376.0], [282.0, 377.0], [287.0, 353.0], [287.0, 365.0], [299.0, 365.0], [287.0, 364.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[275.0, 353.0], [287.0, 365.0], [293.0, 359.0], [287.0, 365.0], [297.0, 365.0], [299.0, 365.0], [275.0, 374.0], [287.0, 280.0], [275.0, 365.0], [287.0, 365.0], [287.0, 365.0], [275.0, 354.0], [276.0, 376.0], [287.0, 377.0], [287.0, 353.0], [287.0, 372.0], [299.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[275.0, 353.0], [297.0, 365.0], [287.0, 365.0], [287.0, 365.0], [297.0, 365.0], [299.0, 365.0], [275.0, 374.0], [287.0, 302.0], [275.0, 365.0], [287.0, 365.0], [287.0, 365.0], [275.0, 354.0], [275.0, 377.0], [287.0, 377.0], [287.0, 353.0], [287.0, 377.0], [299.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[275.0, 353.0], [297.0, 365.0], [287.0, 365.0], [287.0, 365.0], [297.0, 365.0], [299.0, 365.0], [275.0, 374.0], [287.0, 318.0], [275.0, 365.0], [287.0, 365.0], [287.0, 365.0], [275.0, 354.0], [275.0, 377.0], [287.0, 377.0], [287.0, 353.0], [287.0, 377.0], [299.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[275.0, 353.0], [297.0, 365.0], [287.0, 365.0], [287.0, 365.0], [297.0, 365.0], [299.0, 365.0], [285.0, 375.0], [287.0, 330.0], [275.0, 365.0], [287.0, 365.0], [287.0, 365.0], [275.0, 353.0], [275.0, 377.0], [287.0, 377.0], [287.0, 353.0], [287.0, 377.0], [299.0, 365.0], [287.0, 365.0], [287.0, 353.0], [275.0, 353.0]]}, {"user_location": [[278.0, 356.0], [299.0, 365.0], [287.0, 365.0], [287.0, 365.0], [297.0, 365.0], [299.0, 365.0], [287.0, 375.0], [287.0, 352.0], [287.0, 365.0], [287.0, 365.0], [287.0, 365.0], [275.0, 353.0], [275.0, 377.0], [287.0, 357.0], [287.0, 353.0], [287.0, 377.0], [299.0, 365.0], [287.0, 365.0], [287.0, 353.0], [278.0, 356.0]]}, {"user_location": [[281.0, 359.0], [302.0, 368.0], [290.0, 368.0], [290.0, 368.0], [300.0, 368.0], [302.0, 368.0], [290.0, 378.0], [290.0, 355.0], [290.0, 368.0], [290.0, 368.0], [290.0, 368.0], [278.0, 356.0], [278.0, 380.0], [290.0, 360.0], [290.0, 356.0], [290.0, 380.0], [302.0, 368.0], [290.0, 368.0], [290.0, 356.0], [281.0, 359.0]]}, {"user_location": [[284.0, 362.0], [305.0, 371.0], [293.0, 371.0], [293.0, 371.0], [303.0, 371.0], [305.0, 371.0], [293.0, 381.0], [293.0, 358.0], [293.0, 371.0], [293.0, 371.0], [293.0, 371.0], [281.0, 359.0], [281.0, 383.0], [293.0, 363.0], [293.0, 359.0], [293.0, 383.0], [305.0, 371.0], [293.0, 371.0], [293.0, 359.0], [284.0, 362.0]]}, {"user_location": [[287.0, 365.0], [308.0, 374.0], [296.0, 374.0], [296.0, 374.0], [306.0, 374.0], [308.0, 374.0], [296.0, 384.0], [296.0, 361.0], [296.0, 374.0], [296.0, 374.0], [296.0, 374.0], [284.0, 362.0], [284.0, 386.0], [296.0, 366.0], [296.0, 362.0], [296.0, 386.0], [308.0, 374.0], [296.0, 374.0], [296.0, 362.0], [287.0, 365.0]]}, {"user_location": [[290.0, 368.0], [311.0, 377.0], [299.0, 377.0], [299.0, 377.0], [309.0, 377.0], [311.0, 377.0], [299.0, 387.0], [299.0, 364.0], [299.0, 377.0], [299.0, 377.0], [299.0, 377.0], [287.0, 365.0], [287.0, 389.0], [299.0, 369.0], [299.0, 365.0], [299.0, 389.0], [311.0, 377.0], [299.0, 377.0], [299.0, 365.0], [290.0, 368.0]]}, {"user_location": [[293.0, 371.0], [314.0, 380.0], [302.0, 380.0], [302.0, 380.0], [312.0, 380.0], [314.0, 380.0], [302.0, 390.0], [302.0, 367.0], [302.0, 380.0], [302.0, 380.0], [302.0, 380.0], [290.0, 368.0], [290.0, 392.0], [302.0, 372.0], [302.0, 368.0], [302.0, 392.0], [314.0, 380.0], [302.0, 380.0], [302.0, 368.0], [293.0, 371.0]]}, {"user_location": [[296.0, 374.0], [317.0, 383.0], [305.0, 383.0], [305.0, 383.0], [315.0, 383.0], [317.0, 383.0], [305.0, 393.0], [305.0, 370.0], [305.0, 383.0], [305.0, 383.0], [305.0, 383.0], [293.0, 371.0], [293.0, 395.0], [305.0, 375.0], [305.0, 371.0], [305.0, 395.0], [317.0, 383.0], [305.0, 383.0], [305.0, 371.0], [296.0, 374.0]]}, {"user_location": [[299.0, 377.0], [320.0, 386.0], [308.0, 386.0], [308.0, 386.0], [318.0, 386.0], [320.0, 386.0], [308.0, 396.0], [308.0, 373.0], [308.0, 386.0], [308.0, 386.0], [308.0, 386.0], [296.0, 374.0], [296.0, 398.0], [308.0, 378.0], [308.0, 374.0], [308.0, 398.0], [320.0, 386.0], [308.0, 386.0], [308.0, 374.0], [299.0, 377.0]]}, {"user_location": [[302.0, 380.0], [323.0, 389.0], [311.0, 389.0], [311.0, 389.0], [321.0, 389.0], [323.0, 389.0], [311.0, 399.0], [311.0, 376.0], [311.0, 389.0], [311.0, 389.0], [311.0, 389.0], [299.0, 377.0], [299.0, 401.0], [311.0, 381.0], [311.0, 377.0], [311.0, 401.0], [323.0, 389.0], [311.0, 389.0], [311.0, 377.0], [302.0, 380.0]]}, {"user_location": [[305.0, 383.0], [326.0, 392.0], [314.0, 392.0], [314.0, 392.0], [324.0, 392.0], [326.0, 392.0], [314.0, 402.0], [314.0, 379.0], [314.0, 392.0], [314.0, 392.0], [314.0, 392.0], [302.0, 380.0], [302.0, 404.0], [314.0, 384.0], [314.0, 380.0], [314.0, 404.0], [326.0, 392.0], [314.0, 392.0], [314.0, 380.0], [305.0, 383.0]]}, {"user_location": [[308.0, 386.0], [329.0, 395.0], [317.0, 395.0], [317.0, 395.0], [327.0, 395.0], [329.0, 395.0], [317.0, 405.0], [317.0, 382.0], [317.0, 395.0], [317.0, 395.0], [317.0, 395.0], [305.0, 383.0], [305.0, 407.0], [317.0, 387.0], [317.0, 383.0], [317.0, 407.0], [329.0, 395.0], [317.0, 395.0], [317.0, 383.0], [308.0, 386.0]]}, {"user_location": [[311.0, 389.0], [332.0, 398.0], [320.0, 398.0], [320.0, 398.0], [330.0, 398.0], [332.0, 398.0], [320.0, 408.0], [320.0, 385.0], [320.0, 398.0], [320.0, 398.0], [320.0, 398.0], [308.0, 386.0], [308.0, 410.0], [320.0, 390.0], [320.0, 386.0], [320.0, 410.0], [332.0, 398.0], [320.0, 398.0], [320.0, 386.0], [311.0, 389.0]]}, {"user_location": [[314.0, 392.0], [335.0, 401.0], [323.0, 401.0], [323.0, 401.0], [333.0, 401.0], [335.0, 401.0], [323.0, 411.0], [323.0, 388.0], [323.0, 401.0], [323.0, 401.0], [323.0, 401.0], [311.0, 389.0], [311.0, 413.0], [323.0, 393.0], [323.0, 389.0], [323.0, 413.0], [335.0, 401.0], [323.0, 401.0], [323.0, 389.0], [314.0, 392.0]]}, {"user_location": [[317.0, 395.0], [338.0, 404.0], [326.0, 404.0], [326.0, 404.0], [336.0, 404.0], [338.0, 404.0], [326.0, 414.0], [326.0, 391.0], [326.0, 404.0], [326.0, 404.0], [326.0, 404.0], [314.0, 392.0], [314.0, 416.0], [326.0, 396.0], [326.0, 392.0], [326.0, 416.0], [338.0, 404.0], [326.0, 404.0], [326.0, 392.0], [317.0, 395.0]]}, {"user_location": [[320.0, 398.0], [341.0, 407.0], [329.0, 407.0], [329.0, 407.0], [339.0, 407.0], [341.0, 407.0], [329.0, 417.0], [329.0, 394.0], [329.0, 407.0], [329.0, 407.0], [329.0, 407.0], [317.0, 395.0], [317.0, 419.0], [329.0, 399.0], [329.0, 395.0], [329.0, 419.0], [341.0, 407.0], [329.0, 407.0], [329.0, 395.0], [320.0, 398.0]]}, {"user_location": [[323.0, 401.0], [344.0, 410.0], [332.0, 410.0], [332.0, 410.0], [342.0, 410.0], [344.0, 410.0], [332.0, 420.0], [332.0, 397.0], [332.0, 410.0], [332.0, 410.0], [332.0, 410.0], [320.0, 398.0], [320.0, 422.0], [332.0, 402.0], [332.0, 398.0], [332.0, 422.0], [344.0, 410.0], [332.0, 410.0], [332.0, 398.0], [323.0, 401.0]]}, {"user_location": [[326.0, 404.0], [347.0, 413.0], [335.0, 413.0], [335.0, 413.0], [345.0, 413.0], [347.0, 413.0], [335.0, 423.0], [335.0, 400.0], [335.0, 413.0], [335.0, 413.0], [335.0, 413.0], [323.0, 401.0], [323.0, 425.0], [335.0, 405.0], [335.0, 401.0], [335.0, 425.0], [347.0, 413.0], [335.0, 413.0], [335.0, 401.0], [326.0, 404.0]]}, {"user_location": [[329.0, 407.0], [350.0, 416.0], [338.0, 416.0], [338.0, 416.0], [348.0, 416.0], [350.0, 416.0], [338.0, 426.0], [338.0, 403.0], [338.0, 416.0], [338.0, 416.0], [338.0, 416.0], [326.0, 404.0], [326.0, 428.0], [338.0, 408.0], [338.0, 404.0], [338.0, 428.0], [350.0, 416.0], [338.0, 416.0], [338.0, 404.0], [329.0, 407.0]]}, {"user_location": [[332.0, 410.0], [353.0, 419.0], [341.0, 419.0], [341.0, 419.0], [351.0, 419.0], [353.0, 419.0], [341.0, 429.0], [341.0, 406.0], [341.0, 419.0], [341.0, 419.0], [341.0, 419.0], [329.0, 407.0], [329.0, 431.0], [341.0, 411.0], [341.0, 407.0], [341.0, 431.0], [353.0, 419.0], [341.0, 419.0], [341.0, 407.0], [332.0, 410.0]]}, {"user_location": [[335.0, 413.0], [356.0, 422.0], [344.0, 422.0], [344.0, 422.0], [354.0, 422.0], [356.0, 422.0], [344.0, 432.0], [344.0, 409.0], [344.0, 422.0], [344.0, 422.0], [344.0, 422.0], [332.0, 410.0], [332.0, 434.0], [344.0, 414.0], [344.0, 410.0], [344.0, 434.0], [356.0, 422.0], [344.0, 422.0], [344.0, 410.0], [335.0, 413.0]]}, {"user_location": [[338.0, 416.0], [359.0, 425.0], [347.0, 425.0], [347.0, 425.0], [357.0, 425.0], [359.0, 425.0], [347.0, 435.0], [347.0, 412.0], [347.0, 425.0], [347.0, 425.0], [347.0, 425.0], [335.0, 413.0], [335.0, 437.0], [347.0, 417.0], [347.0, 413.0], [347.0, 437.0], [359.0, 425.0], [347.0, 425.0], [347.0, 413.0], [338.0, 416.0]]}, {"user_location": [[341.0, 419.0], [362.0, 428.0], [350.0, 428.0], [350.0, 428.0], [360.0, 428.0], [362.0, 428.0], [350.0, 438.0], [350.0, 415.0], [350.0, 428.0], [350.0, 428.0], [350.0, 428.0], [338.0, 416.0], [338.0, 440.0], [350.0, 420.0], [350.0, 416.0], [350.0, 440.0], [362.0, 428.0], [350.0, 428.0], [350.0, 416.0], [341.0, 419.0]]}, {"user_location": [[344.0, 422.0], [365.0, 431.0], [353.0, 431.0], [353.0, 431.0], [363.0, 431.0], [365.0, 431.0], [353.0, 441.0], [353.0, 418.0], [353.0, 431.0], [353.0, 431.0], [353.0, 431.0], [341.0, 419.0], [341.0, 443.0], [353.0, 423.0], [353.0, 419.0], [353.0, 443.0], [365.0, 431.0], [353.0, 431.0], [353.0, 419.0], [344.0, 422.0]]}, {"user_location": [[347.0, 425.0], [368.0, 434.0], [356.0, 434.0], [356.0, 434.0], [366.0, 434.0], [368.0, 434.0], [356.0, 444.0], [356.0, 421.0], [356.0, 434.0], [356.0, 434.0], [356.0, 434.0], [344.0, 422.0], [344.0, 446.0], [356.0, 426.0], [356.0, 422.0], [356.0, 446.0], [368.0, 434.0], [356.0, 434.0], [356.0, 422.0], [347.0, 425.0]]}, {"user_location": [[350.0, 428.0], [371.0, 437.0], [359.0, 437.0], [359.0, 437.0], [369.0, 437.0], [371.0, 437.0], [359.0, 447.0], [359.0, 424.0], [359.0, 437.0], [359.0, 437.0], [359.0, 437.0], [347.0, 425.0], [347.0, 449.0], [359.0, 429.0], [359.0, 425.0], [359.0, 449.0], [371.0, 437.0], [359.0, 437.0], [359.0, 425.0], [350.0, 428.0]]}, {"user_location": [[353.0, 431.0], [374.0, 440.0], [362.0, 440.0], [362.0, 440.0], [372.0, 440.0], [374.0, 440.0], [362.0, 450.0], [362.0, 427.0], [362.0, 440.0], [362.0, 440.0], [362.0, 440.0], [350.0, 428.0], [350.0, 452.0], [362.0, 432.0], [362.0, 428.0], [362.0, 452.0], [374.0, 440.0], [362.0, 440.0], [362.0, 428.0], [353.0, 431.0]]}, {"user_location": [[356.0, 434.0], [377.0, 443.0], [365.0, 443.0], [365.0, 443.0], [375.0, 443.0], [377.0, 443.0], [365.0, 453.0], [365.0, 430.0], [365.0, 443.0], [365.0, 443.0], [365.0, 443.0], [353.0, 431.0], [353.0, 455.0], [365.0, 435.0], [365.0, 431.0], [365.0, 455.0], [377.0, 443.0], [365.0, 443.0], [365.0, 431.0], [356.0, 434.0]]}, {"user_location": [[359.0, 437.0], [380.0, 446.0], [368.0, 446.0], [368.0, 446.0], [378.0, 446.0], [380.0, 446.0], [368.0, 456.0], [368.0, 433.0], [368.0, 446.0], [368.0, 446.0], [368.0, 446.0], [356.0, 434.0], [356.0, 458.0], [368.0, 438.0], [368.0, 434.0], [368.0, 458.0], [380.0, 446.0], [368.0, 446.0], [368.0, 434.0], [359.0, 437.0]]}, {"user_location": [[362.0, 440.0], [383.0, 449.0], [371.0, 449.0], [371.0, 449.0], [381.0, 449.0], [383.0, 449.0], [371.0, 459.0], [371.0, 436.0], [371.0, 449.0], [371.0, 449.0], [371.0, 449.0], [359.0, 437.0], [359.0, 461.0], [371.0, 441.0], [371.0, 437.0], [371.0, 461.0], [383.0, 449.0], [371.0, 449.0], [371.0, 437.0], [362.0, 440.0]]}, {"user_location": [[365.0, 443.0], [386.0, 452.0], [374.0, 452.0], [374.0, 452.0], [384.0, 452.0], [386.0, 452.0], [374.0, 462.0], [374.0, 439.0], [374.0, 452.0], [374.0, 452.0], [374.0, 452.0], [362.0, 440.0], [362.0, 464.0], [374.0, 444.0], [374.0, 440.0], [374.0, 464.0], [386.0, 452.0], [374.0, 452.0], [374.0, 440.0], [365.0, 443.0]]}, {"user_location": [[368.0, 446.0], [389.0, 455.0], [377.0, 455.0], [377.0, 455.0], [387.0, 455.0], [389.0, 455.0], [377.0, 465.0], [377.0, 442.0], [377.0, 455.0], [377.0, 455.0], [377.0, 455.0], [365.0, 443.0], [365.0, 467.0], [377.0, 447.0], [377.0, 443.0], [377.0, 467.0], [389.0, 455.0], [377.0, 455.0], [377.0, 443.0], [368.0, 446.0]]}, {"user_location": [[371.0, 449.0], [392.0, 458.0], [380.0, 458.0], [380.0, 458.0], [390.0, 458.0], [392.0, 458.0], [380.0, 468.0], [380.0, 445.0], [380.0, 458.0], [380.0, 458.0], [380.0, 458.0], [368.0, 446.0], [368.0, 470.0], [380.0, 450.0], [380.0, 446.0], [380.0, 470.0], [392.0, 458.0], [380.0, 458.0], [380.0, 446.0], [371.0, 449.0]]}, {"user_location": [[374.0, 452.0], [395.0, 461.0], [383.0, 461.0], [383.0, 461.0], [393.0, 461.0], [395.0, 461.0], [383.0, 471.0], [383.0, 448.0], [383.0, 461.0], [383.0, 461.0], [383.0, 461.0], [371.0, 449.0], [371.0, 473.0], [383.0, 453.0], [383.0, 449.0], [383.0, 473.0], [395.0, 461.0], [383.0, 461.0], [383.0, 449.0], [374.0, 452.0]]}, {"user_location": [[377.0, 455.0], [398.0, 464.0], [386.0, 464.0], [386.0, 464.0], [396.0, 464.0], [398.0, 464.0], [386.0, 474.0], [386.0, 451.0], [386.0, 464.0], [386.0, 464.0], [386.0, 464.0], [374.0, 452.0], [374.0, 476.0], [386.0, 456.0], [386.0, 452.0], [386.0, 476.0], [398.0, 464.0], [386.0, 464.0], [386.0, 452.0], [377.0, 455.0]]}, {"user_location": [[380.0, 458.0], [401.0, 467.0], [389.0, 467.0], [389.0, 467.0], [399.0, 467.0], [401.0, 467.0], [389.0, 477.0], [389.0, 454.0], [389.0, 467.0], [389.0, 467.0], [389.0, 467.0], [377.0, 455.0], [377.0, 479.0], [389.0, 459.0], [389.0, 455.0], [389.0, 479.0], [401.0, 467.0], [389.0, 467.0], [389.0, 455.0], [380.0, 458.0]]}, {"user_location": [[383.0, 461.0], [404.0, 470.0], [392.0, 470.0], [392.0, 470.0], [402.0, 470.0], [404.0, 470.0], [392.0, 480.0], [392.0, 457.0], [392.0, 470.0], [392.0, 470.0], [392.0, 470.0], [380.0, 458.0], [380.0, 482.0], [392.0, 462.0], [392.0, 458.0], [392.0, 482.0], [404.0, 470.0], [392.0, 470.0], [392.0, 458.0], [383.0, 461.0]]}, {"user_location": [[386.0, 464.0], [407.0, 473.0], [395.0, 473.0], [395.0, 473.0], [405.0, 473.0], [407.0, 473.0], [395.0, 483.0], [395.0, 460.0], [395.0, 473.0], [395.0, 473.0], [395.0, 473.0], [383.0, 461.0], [383.0, 483.0], [395.0, 465.0], [395.0, 461.0], [395.0, 483.0], [407.0, 473.0], [395.0, 473.0], [395.0, 461.0], [386.0, 464.0]]}, {"user_location": [[389.0, 467.0], [410.0, 476.0], [398.0, 476.0], [398.0, 476.0], [408.0, 476.0], [410.0, 476.0], [398.0, 483.0], [398.0, 463.0], [398.0, 476.0], [398.0, 476.0], [398.0, 476.0], [386.0, 464.0], [386.0, 483.0], [398.0, 468.0], [398.0, 464.0], [398.0, 483.0], [410.0, 476.0], [398.0, 476.0], [398.0, 464.0], [389.0, 467.0]]}, {"user_location": [[392.0, 470.0], [413.0, 479.0], [401.0, 479.0], [401.0, 479.0], [411.0, 479.0], [413.0, 479.0], [401.0, 483.0], [401.0, 466.0], [401.0, 479.0], [401.0, 479.0], [401.0, 479.0], [389.0, 467.0], [389.0, 483.0], [401.0, 471.0], [401.0, 467.0], [401.0, 483.0], [413.0, 479.0], [401.0, 479.0], [401.0, 467.0], [392.0, 470.0]]}, {"user_location": [[395.0, 473.0], [416.0, 482.0], [404.0, 482.0], [404.0, 482.0], [414.0, 482.0], [416.0, 482.0], [404.0, 483.0], [404.0, 469.0], [404.0, 482.0], [404.0, 482.0], [404.0, 482.0], [392.0, 470.0], [392.0, 483.0], [404.0, 474.0], [404.0, 470.0], [404.0, 483.0], [416.0, 482.0], [404.0, 482.0], [404.0, 470.0], [395.0, 473.0]]}, {"user_location": [[398.0, 476.0], [419.0, 483.0], [407.0, 483.0], [407.0, 483.0], [417.0, 483.0], [419.0, 483.0], [407.0, 483.0], [407.0, 472.0], [407.0, 483.0], [407.0, 483.0], [407.0, 483.0], [395.0, 473.0], [395.0, 483.0], [407.0, 477.0], [407.0, 473.0], [407.0, 483.0], [419.0, 483.0], [407.0, 483.0], [407.0, 473.0], [398.0, 476.0]]}, {"user_location": [[401.0, 479.0], [422.0, 483.0], [410.0, 483.0], [410.0, 483.0], [420.0, 483.0], [422.0, 483.0], [410.0, 483.0], [410.0, 475.0], [410.0, 483.0], [410.0, 483.0], [410.0, 483.0], [398.0, 476.0], [398.0, 483.0], [410.0, 480.0], [410.0, 476.0], [410.0, 483.0], [422.0, 483.0], [410.0, 483.0], [410.0, 476.0], [401.0, 479.0]]}, {"user_location": [[404.0, 482.0], [425.0, 483.0], [413.0, 483.0], [413.0, 483.0], [423.0, 483.0], [425.0, 483.0], [413.0, 483.0], [413.0, 478.0], [413.0, 483.0], [413.0, 483.0], [413.0, 483.0], [401.0, 479.0], [401.0, 483.0], [413.0, 483.0], [413.0, 479.0], [413.0, 483.0], [425.0, 483.0], [413.0, 483.0], [413.0, 479.0], [404.0, 482.0]]}, {"user_location": [[407.0, 483.0], [428.0, 483.0], [416.0, 483.0], [416.0, 483.0], [426.0, 483.0], [428.0, 483.0], [416.0, 483.0], [416.0, 481.0], [416.0, 483.0], [416.0, 483.0], [416.0, 483.0], [404.0, 482.0], [404.0, 483.0], [416.0, 483.0], [416.0, 482.0], [416.0, 483.0], [428.0, 483.0], [416.0, 483.0], [416.0, 482.0], [407.0, 483.0]]}, {"user_location": [[410.0, 483.0], [431.0, 483.0], [419.0, 483.0], [419.0, 483.0], [429.0, 483.0], [431.0, 483.0], [419.0, 483.0], [419.0, 483.0], [419.0, 483.0], [419.0, 483.0], [419.0, 483.0], [407.0, 483.0], [407.0, 483.0], [419.0, 483.0], [419.0, 483.0], [419.0, 483.0], [431.0, 483.0], [419.0, 483.0], [419.0, 483.0], [410.0, 483.0]]}, {"user_location": [[413.0, 483.0], [434.0, 483.0], [422.0, 483.0], [422.0, 483.0], [432.0, 483.0], [434.0, 483.0], [422.0, 483.0], [422.0, 483.0], [422.0, 483.0], [422.0, 483.0], [422.0, 483.0], [410.0, 483.0], [410.0, 483.0], [422.0, 483.0], [422.0, 483.0], [422.0, 483.0], [434.0, 483.0], [422.0, 483.0], [422.0, 483.0], [413.0, 483.0]]}, {"user_location": [[416.0, 483.0], [437.0, 483.0], [425.0, 483.0], [425.0, 483.0], [435.0, 483.0], [437.0, 483.0], [425.0, 483.0], [425.0, 483.0], [425.0, 483.0], [425.0, 483.0], [425.0, 483.0], [413.0, 483.0], [413.0, 483.0], [425.0, 483.0], [425.0, 483.0], [425.0, 483.0], [437.0, 483.0], [425.0, 483.0], [425.0, 483.0], [416.0, 483.0]]}, {"user_location": [[419.0, 483.0], [440.0, 483.0], [428.0, 483.0], [428.0, 483.0], [438.0, 483.0], [440.0, 483.0], [428.0, 483.0], [428.0, 483.0], [428.0, 483.0], [428.0, 483.0], [428.0, 483.0], [416.0, 483.0], [416.0, 483.0], [428.0, 483.0], [428.0, 483.0], [428.0, 483.0], [440.0, 483.0], [428.0, 483.0], [428.0, 483.0], [419.0, 483.0]]}, {"user_location": [[422.0, 483.0], [443.0, 483.0], [431.0, 483.0], [431.0, 483.0], [441.0, 483.0], [443.0, 483.0], [431.0, 483.0], [431.0, 483.0], [431.0, 483.0], [431.0, 483.0], [431.0, 483.0], [419.0, 483.0], [419.0, 483.0], [431.0, 483.0], [431.0, 483.0], [431.0, 483.0], [443.0, 483.0], [431.0, 483.0], [431.0, 483.0], [422.0, 483.0]]}, {"user_location": [[425.0, 483.0], [446.0, 483.0], [434.0, 483.0], [434.0, 483.0], [444.0, 483.0], [446.0, 483.0], [434.0, 483.0], [434.0, 483.0], [434.0, 483.0], [434.0, 483.0], [434.0, 483.0], [422.0, 483.0], [422.0, 483.0], [434.0, 483.0], [434.0, 483.0], [434.0, 483.0], [446.0, 483.0], [434.0, 483.0], [434.0, 483.0], [425.0, 483.0]]}, {"user_location": [[428.0, 483.0], [449.0, 483.0], [437.0, 483.0], [437.0, 483.0], [447.0, 483.0], [449.0, 483.0], [437.0, 483.0], [437.0, 483.0], [437.0, 483.0], [437.0, 483.0], [437.0, 483.0], [425.0, 483.0], [425.0, 483.0], [437.0, 483.0], [437.0, 483.0], [437.0, 483.0], [449.0, 483.0], [437.0, 483.0], [437.0, 483.0], [428.0, 483.0]]}, {"user_location": [[431.0, 483.0], [452.0, 483.0], [440.0, 483.0], [440.0, 483.0], [450.0, 483.0], [452.0, 483.0], [440.0, 483.0], [440.0, 483.0], [440.0, 483.0], [440.0, 483.0], [440.0, 483.0], [428.0, 483.0], [428.0, 483.0], [440.0, 483.0], [440.0, 483.0], [440.0, 483.0], [452.0, 483.0], [440.0, 483.0], [440.0, 483.0], [431.0, 483.0]]}, {"user_location": [[434.0, 483.0], [455.0, 483.0], [443.0, 483.0], [443.0, 483.0], [453.0, 483.0], [455.0, 483.0], [443.0, 483.0], [443.0, 483.0], [443.0, 483.0], [443.0, 483.0], [443.0, 483.0], [431.0, 483.0], [431.0, 483.0], [443.0, 483.0], [443.0, 483.0], [443.0, 483.0], [455.0, 483.0], [443.0, 483.0], [443.0, 483.0], [434.0, 483.0]]}, {"user_location": [[437.0, 483.0], [458.0, 483.0], [446.0, 483.0], [446.0, 483.0], [456.0, 483.0], [458.0, 483.0], [446.0, 483.0], [446.0, 483.0], [446.0, 483.0], [446.0, 483.0], [446.0, 483.0], [434.0, 483.0], [434.0, 483.0], [446.0, 483.0], [446.0, 483.0], [446.0, 483.0], [458.0, 483.0], [446.0, 483.0], [446.0, 483.0], [437.0, 483.0]]}, {"user_location": [[440.0, 483.0], [461.0, 483.0], [449.0, 483.0], [449.0, 483.0], [459.0, 483.0], [461.0, 483.0], [449.0, 483.0], [449.0, 483.0], [449.0, 483.0], [449.0, 483.0], [449.0, 483.0], [437.0, 483.0], [437.0, 483.0], [449.0, 483.0], [449.0, 483.0], [449.0, 483.0], [461.0, 483.0], [449.0, 483.0], [449.0, 483.0], [440.0, 483.0]]}, {"user_location": [[443.0, 483.0], [464.0, 483.0], [452.0, 483.0], [452.0, 483.0], [462.0, 483.0], [464.0, 483.0], [452.0, 483.0], [452.0, 483.0], [452.0, 483.0], [452.0, 483.0], [452.0, 483.0], [440.0, 483.0], [440.0, 483.0], [452.0, 483.0], [452.0, 483.0], [452.0, 483.0], [464.0, 483.0], [452.0, 483.0], [452.0, 483.0], [443.0, 483.0]]}, {"user_location": [[446.0, 483.0], [467.0, 483.0], [455.0, 483.0], [455.0, 483.0], [465.0, 483.0], [467.0, 483.0], [455.0, 483.0], [455.0, 483.0], [455.0, 483.0], [455.0, 483.0], [455.0, 483.0], [443.0, 483.0], [443.0, 483.0], [455.0, 483.0], [455.0, 483.0], [455.0, 483.0], [467.0, 483.0], [455.0, 483.0], [455.0, 483.0], [446.0, 483.0]]}, {"user_location": [[449.0, 483.0], [470.0, 483.0], [458.0, 483.0], [458.0, 483.0], [468.0, 483.0], [470.0, 483.0], [458.0, 483.0], [458.0, 483.0], [458.0, 483.0], [458.0, 483.0], [458.0, 483.0], [446.0, 483.0], [446.0, 483.0], [458.0, 483.0], [458.0, 483.0], [458.0, 483.0], [470.0, 483.0], [458.0, 483.0], [458.0, 483.0], [449.0, 483.0]]}, {"user_location": [[452.0, 483.0], [473.0, 483.0], [461.0, 483.0], [461.0, 483.0], [471.0, 483.0], [473.0, 483.0], [461.0, 483.0], [461.0, 483.0], [461.0, 483.0], [461.0, 483.0], [461.0, 483.0], [449.0, 483.0], [449.0, 483.0], [461.0, 483.0], [461.0, 483.0], [461.0, 483.0], [473.0, 483.0], [461.0, 483.0], [461.0, 483.0], [452.0, 483.0]]}, {"user_location": [[455.0, 483.0], [476.0, 483.0], [464.0, 483.0], [464.0, 483.0], [474.0, 483.0], [476.0, 483.0], [464.0, 483.0], [464.0, 483.0], [464.0, 483.0], [464.0, 483.0], [464.0, 483.0], [452.0, 483.0], [452.0, 483.0], [464.0, 483.0], [464.0, 483.0], [464.0, 483.0], [476.0, 483.0], [464.0, 483.0], [464.0, 483.0], [455.0, 483.0]]}, {"user_location": [[458.0, 483.0], [479.0, 483.0], [467.0, 483.0], [467.0, 483.0], [477.0, 483.0], [479.0, 483.0], [467.0, 483.0], [467.0, 483.0], [467.0, 483.0], [467.0, 483.0], [467.0, 483.0], [455.0, 483.0], [455.0, 483.0], [467.0, 483.0], [467.0, 483.0], [467.0, 483.0], [479.0, 483.0], [467.0, 483.0], [467.0, 483.0], [458.0, 483.0]]}, {"user_location": [[461.0, 483.0], [482.0, 483.0], [470.0, 483.0], [470.0, 483.0], [480.0, 483.0], [482.0, 483.0], [470.0, 483.0], [470.0, 483.0], [470.0, 483.0], [470.0, 483.0], [470.0, 483.0], [458.0, 483.0], [458.0, 483.0], [470.0, 483.0], [470.0, 483.0], [470.0, 483.0], [482.0, 483.0], [470.0, 483.0], [470.0, 483.0], [461.0, 483.0]]}, {"user_location": [[464.0, 483.0], [483.0, 483.0], [473.0, 483.0], [473.0, 483.0], [483.0, 483.0], [483.0, 483.0], [473.0, 483.0], [473.0, 483.0], [473.0, 483.0], [473.0, 483.0], [473.0, 483.0], [461.0, 483.0], [461.0, 483.0], [473.0, 483.0], [473.0, 483.0], [473.0, 483.0], [483.0, 483.0], [473.0, 483.0], [473.0, 483.0], [464.0, 483.0]]}, {"user_location": [[467.0, 483.0], [483.0, 483.0], [476.0, 483.0], [476.0, 483.0], [483.0, 483.0], [483.0, 483.0], [476.0, 483.0], [476.0, 483.0], [476.0, 483.0], [476.0, 483.0], [476.0, 483.0], [464.0, 483.0], [464.0, 483.0], [476.0, 483.0], [476.0, 483.0], [476.0, 483.0], [483.0, 483.0], [476.0, 483.0], [476.0, 483.0], [467.0, 483.0]]}, {"user_location": [[470.0, 483.0], [483.0, 483.0], [479.0, 483.0], [479.0, 483.0], [483.0, 483.0], [483.0, 483.0], [479.0, 483.0], [479.0, 483.0], [479.0, 483.0], [479.0, 483.0], [479.0, 483.0], [467.0, 483.0], [467.0, 483.0], [479.0, 483.0], [479.0, 483.0], [479.0, 483.0], [483.0, 483.0], [479.0, 483.0], [479.0, 483.0], [470.0, 483.0]]}, {"user_location": [[473.0, 483.0], [483.0, 483.0], [482.0, 483.0], [482.0, 483.0], [483.0, 483.0], [483.0, 483.0], [482.0, 483.0], [482.0, 483.0], [482.0, 483.0], [482.0, 483.0], [482.0, 483.0], [470.0, 483.0], [470.0, 483.0], [482.0, 483.0], [482.0, 483.0], [482.0, 483.0], [483.0, 483.0], [482.0, 483.0], [482.0, 483.0], [473.0, 483.0]]}, {"user_location": [[476.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [473.0, 483.0], [473.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [476.0, 483.0]]}, {"user_location": [[479.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [476.0, 483.0], [476.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [479.0, 483.0]]}, {"user_location": [[482.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [479.0, 483.0], [479.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [482.0, 483.0]]}, {"user_location": [[483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [482.0, 483.0], [482.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0], [483.0, 483.0]]}]'
    location_dict = json.loads(user_location)
    
    com_uav_pos = []
    navi_uav_pos = []
    uav_pos = []
    cnt_all = 0
    user_com_rate = []
    user_pos_auc = []
    uav_to_user_com = []  #json类型
    uav_to_user_navi = []
    uav_to_user = []
    
    
    # print(location_dict[0]['user_location'][0])
    def make_world(self):
        world = World()
        # set any world properties first
        world.dim_c = 2  #是定位维度
        num_communications = 5
        num_navigations = 3
        num_agents = num_communications + num_navigations
        num_communicate_user = 14 #推理 训练皆可变
        num_navigate_user = 6
        num_landmarks = num_communicate_user + num_navigate_user
        # add agents
        world.agents = [Agent() for i in range(num_agents)]
        for i, agent in enumerate(world.agents):
            agent.name = 'agent %d' % i
            agent.collide = True
            agent.silent = True
            agent.communication = True if i < num_communications else False
            agent.navigation = True if i >= num_communications else False
            agent.size = 0.01 if agent.communication else 0.01
            agent.accel = 3.0 if agent.communication else 3.0
            agent.max_speed = 0.8 if agent.communication else 0.8 #人员移动速度可控  这里agent.max_speed是从1编程0.1 9.4
        # add landmarks 
        world.landmarks = [Landmark() for i in range(num_landmarks)]
        for i, landmark in enumerate(world.landmarks):
            landmark.name = 'landmark %d' % i
            landmark.collide = False
            landmark.communication = True if i < num_communicate_user else False
            landmark.navigation = True if i >= num_communicate_user else False
            # if(landmark.communication) :
            #     landmark.movable = True
            # else :
            #     landmark.movable = False
            landmark.movable = False
            landmark.size = 0.005
            landmark.boundary = False
        # rng = default_rng()
        X = np.random.normal(0, 6, num_communicate_user)
        index = 0
        for i, landmark in enumerate(world.landmarks):
            if landmark.communication:
                landmark.normlizeX = X[index] #标准差为0的序列
                index += 1
        # make initial conditions
        self.reset_world(world)
        return world

    def reset_world(self, world):
        # reset world的时候写入一次
        self.uav_to_user = []
        for com in self.uav_to_user_com:
            self.uav_to_user.append(com)
        for navi in self.uav_to_user_navi:
            self.uav_to_user.append(navi)
        self.uav_pos = []
        for com in self.com_uav_pos:
            temp = com
            temp[0] *= 250
            temp[0] += 250
            temp[1] *= 250
            temp[1] += 250
            self.uav_pos.append(temp)
        for navi in self.navi_uav_pos:
            temp = navi
            temp[0] *= 250
            temp[0] += 250
            temp[1] *= 250
            temp[1] += 250
            self.uav_pos.append(temp)
        
        # print(self.uav_pos)
        new_dict = {
                    "com_thre": 0.1, 
                    "pos_thre": 10,
                    "uav_pos": self.uav_pos,
                    "uav_role": [0,0,0,0,0,1,1,1], 
                    "uav_to_user": self.uav_to_user,   #这里需要表示为json数组的形式
                    "user_com_rate": self.user_com_rate, 
                    "user_pos_auc": self.user_pos_auc
                    }
        # data = json.dumps(new_dict, indent=1,cls=NpEncoder)
        data = json.dumps(new_dict,cls=NpEncoder)
        # print(data)
        # with open("/home/zk/maddpg/com_navi_latest_for_ubuntu/maddpg_communicate_navigation_uav_latest/multiagent-particle-envs-master/multiagent/scenarios/deployment20.json", 'a+', newline='\n') as f:
        #     f.write(data)
        #     f.write(',')
        #     f.write('\n')
        for i, agent in enumerate(world.agents):
            if agent.communication: 
                agent.color = np.array([0.85, 0.35, 0.35]) #通信无人机  粉色
                agent.Bs = 10  #通信无人机带宽设定
            else:  
                agent.color = np.array([0.85, 0.85, 0.35]) #导航无人机 黄色
        # random properties for landmarks
        for i, landmark in enumerate(world.landmarks):
            if landmark.communication:
                landmark.color = np.array([0.25, 0.25, 0.25]) #导航用户 黑色
                landmark.Bs = random.randint(3,3) #通信用户所需带宽设定 根据研究点一的需求分级获取 可以把形状大小调整为对应带宽需求
            else:
                landmark.color = np.array([0.35, 0.85, 0.35]) #通信用户  绿色
        # set random initial states  初始位置
        for agent in world.agents:
            # agent.state.p_pos = np.random.uniform(-1, +1, world.dim_p)
            agent.state.p_pos = np.random.uniform(-0.005, +0.005, world.dim_p)  #初始位置放在原点
            agent.state.p_vel = np.zeros(world.dim_p)
            agent.state.c = np.zeros(world.dim_c)
        for i, landmark in enumerate(world.landmarks):
            if not landmark.boundary:
                pos_x = (self.location_dict[int(self.cnt_all)]['user_location'][i][0] - 250) / 250
                pos_y = (self.location_dict[int(self.cnt_all)]['user_location'][i][1] - 250) / 250
                pos = [pos_x,pos_y]
                # print(np.random.uniform(-0.9, -0.9))
                landmark.state.p_pos = pos
                # landmark.state.p_pos = np.random.uniform(-0.9, +0.9, world.dim_p)  #第三维是指生成二维坐标
                landmark.state.p_vel = np.zeros(world.dim_p)
                landmark.pre_pos_x = landmark.state.p_pos[0]
                landmark.pre_pos_y = landmark.state.p_pos[1]
        # print("cnt_all == ",self.cnt_all)
        self.cnt_all += 1
        self.cnt_all %= len(self.location_dict)


    def is_collision(self, agent1, agent2):
        delta_pos = agent1.state.p_pos - agent2.state.p_pos
        dist = np.sqrt(np.sum(np.square(delta_pos)))
        dist_min = agent1.size + agent2.size
        return True if dist < dist_min else False

    # return all adversarial agents
    def communications(self, world):
        return [agent for agent in world.agents if agent.communication]

    def navigations(self, world):
        return [agent for agent in world.agents if agent.navigation]

    def communicate_user(self, world):
        return [Landmark for Landmark in world.landmarks if Landmark.communication]
    
    def navigate_user(self, world):
        return [Landmark for Landmark in world.landmarks if Landmark.navigation]

    def reward(self, agent, world):
        if agent.communication:
            main_reward,whole_rew,success_sum = self.communication_reward(agent,world)
        else:
            main_reward,whole_rew,success_sum = self.navigation_reward(agent,world)
        return main_reward

    def whole_reward(self, agent, world):
        if agent.communication:
            main_reward,whole_rew,success_sum = self.communication_reward(agent,world)
        else:
            main_reward,whole_rew,success_sum = self.navigation_reward(agent,world)
        return whole_rew

    def success_rate(self, agent, world):
        if agent.communication:
            main_reward,whole_rew,success_sum = self.communication_reward(agent,world)
        else:
            main_reward,whole_rew,success_sum = self.navigation_reward(agent,world)
        return success_sum

    def db2W(self, db):
        return pow(10,db/10)/1000

    def getCommunicateRate(self, min_dist, other_dist:list, X):
        P = 20
        P_w = self.db2W(P)
        noise = -140
        noise_w = self.db2W(noise)
        c = 3 * 10**8
        f = 1.4 * 10**3  #下面都转化为MHZ算的
        d = 1
        A = 0.25
        C = 0.39
        E = 0.25
        G = 0
        H = 0.05
        h = 100  #无人机固定飞行高度
        alpha = 3.5

        xy_dist = min_dist * 100 #需要计算的值  muti-env中环境dist在0~3左右
        dist = math.sqrt(h**2 + xy_dist**2)
        theta = math.atan(h / xy_dist)
        L_fspl = 20 * math.log(4 * math.pi * f * 10 ** 6 * d / c,10)
        L_slant = A * f ** C * dist ** E * (G + theta) ** H
        L_f = L_fspl + 10 * alpha * math.log(dist / d,10) + L_slant + X  #加个X
        L = 10 ** (L_f/10)

        xy_dist_other = other_dist
        other_sum_L = 0
        for dis in xy_dist_other:
            dis *= 100 #单位是m
            dist_other = math.sqrt(h**2 + dis**2)
            theta_other = math.atan(h / dist_other)
            L_slant_other = A * f ** C * dist_other ** E * (G + theta_other) ** H
            L_f_other = L_fspl + 10 * alpha * math.log(dist_other / d,10) + L_slant_other + X  #加个X
            L_other = 10 ** (L_f_other/10)
            other_sum_L += L_other

        r = (P_w / L) / (noise_w + P_w / other_sum_L)

        rate = math.log(1 + r,2)
        
        return rate

    def getCRLB(self,list_user:list,list_time:list,list_uav:list):
        c = 3*10**8
        sum_crlb = 0
        pos_auc = []
        for (l,u) in zip(list_time,list_user):
            nk0_1 = abs(l[0] - l[1])
            nk0_2 = abs(l[0] - l[2])
            ek = [nk0_1*c,nk0_2*c]
            ek_T = np.mat(ek).T
            Rk = np.cov(ek_T*ek)
            # loc = Locator(list_uav)  #这里是获取infer的点坐标  使用TDOA方法
            # list_infer_user= loc.locate(l) #这里time的维度 和 list_locate要保持一致
            xu = u['x']
            yu = u['y']

            xk0 = list_uav[0]['x']
            xk1 = list_uav[1]['x']
            xk2 = list_uav[2]['x']
            yk0 = list_uav[0]['y']
            yk1 = list_uav[1]['y']
            yk2 = list_uav[2]['y']

            #rk是距离
            rk0 = np.sqrt((xk0 - xu)**2 + (yk0 - yu)**2)
            rk1 = np.sqrt((xk1 - xu)**2 + (yk1 - yu)**2)
            rk2 = np.sqrt((xk2 - xu)**2 + (yk2 - yu)**2)

            Qk = [[(xu - xk1)/rk1 - (xu - xk0)/rk0,(yu - yk1)/rk1 - (yu - yk0)/rk0],
                [(xu - xk2)/rk2 - (xu - xk0)/rk0,(yu - yk2)/rk2 - (yu - yk0)/rk0]]

            temp = np.mat(Qk).T * np.linalg.pinv(Rk) * Qk

            J = 1/np.mat(temp).trace()
            # print ("J[0,0] = ",J[0,0])
            sum_crlb += J[0,0]
            auc = 1
            if(J[0,0] >= 0.04):
                auc = np.random.uniform(5,9.99)
            elif(J[0,0] < 0.003):
                auc = np.random.uniform(0.9,5)
            else:
                auc = J[0,0] * 250
            pos_auc.append(auc)
        self.user_pos_auc = pos_auc
        return abs(sum_crlb)

    def navigation_reward(self, agent, world):  #导航无人机
        rew = 0
        only_rew = 0
        sum_success = 0
        navigations = self.navigations(world)
        navigate_users = self.navigate_user(world)
        #对每个定位节点而言  找到所有的定位节点 传入即可
        list_uav = []
        for a in navigations:
            dict0 = dict([('x',a.state.p_pos[0] * 10),('y',a.state.p_pos[1] * 10)])
            list_uav.append(dict0)

        list_time = []  #这里应该是二维数组  记录的是每个user对应的时间
        for l in navigate_users:
            list_temp = []
            for a in navigations:
                time = np.sqrt(np.sum(np.sqrt(10) * np.square(a.state.p_pos - l.state.p_pos))) / (3 * 10**8)
                list_temp.append(time)
            list_time.append(list_temp)

        list_user = []
        for l in navigate_users:
            dict0 = dict([('x',l.state.p_pos[0] * 10),('y',l.state.p_pos[1] * 10)])
            list_user.append(dict0)

        #得到了time矩阵
        crlb = self.getCRLB(list_user,list_time,list_uav)
        # crlb *= 10 # 10是导航的重要性系数
        if(crlb < 5) :  #阈值
            # rew -= crlb 
            only_rew -= crlb
        else:
            # rew -= 5
            only_rew -= 5
        navi_max_dist = 0
        for l in navigate_users:
            dists = sum([np.sqrt(np.sum(np.square(a.state.p_pos - l.state.p_pos))) for a in navigations])
            navi_max_dist = max(dists,navi_max_dist)
            # print("nav_dist:",dists)
            # print("nav_dists : ",dists)
            rew -= dists  #最主要是来自这的惩罚
        rew -= 4*navi_max_dist  #优化阈值
        if agent.collide:
            for a in navigations:
                if self.is_collision(a, agent):
                    rew -= 2
        
        navi_dict = []
        # navi_uav_pos = []
        # for adv in navigations:
        #     navi_uav_pos.append(adv.state.p_pos)
        # for user in navigate_users:
        #     dict_temp = {
        #                     "uav_pos" : navi_uav_pos,
        #                     "user_pos" : user.state.p_pos
        #                 }
        #     navi_dict.append(dict_temp)
        navi_user_pos = []
        navi_uav_pos_temp = []
        for user in navigate_users:
            temp = copy.copy(user.state.p_pos)
            temp[0] *= 250
            temp[0] += 250
            temp[1] *= 250
            temp[1] += 250
            navi_user_pos.append(temp)
            # navi_user_pos.append(user.state.p_pos)
        for uav in navigations:
            t = copy.copy(uav.state.p_pos)
            t[0] *= 250
            t[0] += 250
            t[1] *= 250
            t[1] += 250
            navi_uav_pos_temp.append(uav.state.p_pos)  #这里统一在reset变化
            # navi_uav_pos_temp.append(uav.state.p_pos)  #这里统一在reset变化
            dict_temp = {
                            "uav_pos" : t,
                            "user_pos" : navi_user_pos
                        }
            navi_dict.append(dict_temp)
        
        # print("定位无人机用户关联：",navi_dict)
        self.uav_to_user_navi = navi_dict
        self.navi_uav_pos = navi_uav_pos_temp
        return rew,only_rew,sum_success

    #函数中传值过来  然后写个函数打印即可
    def getUavPosition(self):
        # print("uav_pos:",self.uav_pos)
        return self.uav_pos

    def communication_reward(self, agent, world):  #通信无人机  这里会发生碰撞  这里每个无人机的reward是用户的数组通信速率的加权和  然后无人机有自己的固定带宽  其他的发射功率 信道增益等都是次要的
        # communications are rewarded for collisions with agents
        rew = 0  #这里的reward是某一类整体的reward   但是也可以计算出这个整体中每一个节点的reward值 这需要去计算遗传算法的适应度的
        #如果超出连接数量  那么负奖励 > 连接的正奖励  连接一个给20  超出给-30
        whole_rew = 0
        success_sum = 0
        shape = True
        communicate_users = self.communicate_user(world)
        communications = self.communications(world)
        adv_dict = {}
        for adv in communications:
            adv_dict[adv] = []
        for a in communicate_users:
            min_dist = 999
            min_adv = communications[0]
            for adv in communications:
                if(min_dist > np.sqrt(np.sum(np.square(a.state.p_pos - adv.state.p_pos)))):
                    min_dist = np.sqrt(np.sum(np.square(a.state.p_pos - adv.state.p_pos)))
                    min_adv = adv
            adv_dict[min_adv].append(a)
        
        com_dict = []
        for adv in communications:
            temp = copy.copy(adv.state.p_pos)
            temp[0] *= 250
            temp[0] += 250
            temp[1] *= 250
            temp[1] += 250
            user_pos = []
            for a in adv_dict[adv]:
                t = copy.copy(a.state.p_pos)
                t[0] *= 250
                t[0] += 250
                t[1] *= 250
                t[1] += 250
                user_pos.append(t)
            dict_temp = {
                            "uav_pos" : temp,  #改成temp
                            "user_pos" : user_pos
                        }
            com_dict.append(dict_temp)
        # print("通信无人机用户关联：",com_dict)
        self.uav_to_user_com = com_dict
   
        com_max_dist = 0
        for user in communicate_users:
            dist_com =  sum([np.sqrt(np.sum(np.square(a.state.p_pos - user.state.p_pos))) for a in communications])
            com_max_dist = max(com_max_dist,dist_com)
            rew -= dist_com
            # dist_com_all += dist_com
        rew -= 4*com_max_dist
        # print(dist_com_all)
        #计算一下 每个无人机连接的用户带宽之和  和自己拥有的带宽
        if shape:  # reward can optionally be shaped (decreased reward for increased distance from agents)
            success = True
            user_rate_temp = []
            for adv in communications:   #对应的是每一个通信无人机
                #如果只关注sum的话 可能会出现跑飞的情况  需要距离惩罚
                dist_punish = sum([np.sqrt(np.sum(np.square(a.state.p_pos - adv.state.p_pos))) for a in adv_dict[adv]])
                # print("com_dist==",dist_punish)
                sum_Bs = 0
                sum_rate = 0
                min_rate = 999
                for a in adv_dict[adv]:
                    dist_cur = np.sqrt(np.sum(np.square(a.state.p_pos - adv.state.p_pos)))
                    dist_list = []
                    for a_adv in communications:
                        if(a_adv != adv):
                            dist_list.append(np.sqrt(np.sum(np.square(a.state.p_pos - a_adv.state.p_pos))))
                    x = a.normlizeX
                    rate = self.getCommunicateRate(dist_cur,dist_list,x) * a.Bs
                    user_rate_temp.append(rate / 10)
                    sum_Bs += a.Bs
                    sum_rate += rate
                    # print("rate : ",rate)
                    min_rate = min(min_rate,rate)
                if sum_Bs > adv.Bs : #这里阈值要定义一下 0.5M/s
                    success = False
                    # rew -= 5 * sum_rate
                else :
                    rew += 2 * sum_rate
                    whole_rew += sum_rate
                    # print("sum_rate_true : ",sum_rate)
                for p in range(world.dim_p):
                    x = abs(adv.state.p_pos[p])
                    if(x >= 1):
                        success = False
                # rew -= dist_com_all #距离惩罚
                # print("dist_punish : ",dist_punish)
                # rew -= min_rate #优化最低
            # print("用户速率数组：",user_rate_temp)
            self.user_com_rate = user_rate_temp
            if success == True:
                success_sum = 1
                # print ("success!")
            # else :
                # print ("false!")
        
        for adv1 in communications:
            for adv2 in communications:
                if adv1 == adv2:
                    continue
                if self.is_collision(adv1, adv2):
                    rew -= 2
        def bound(x):
            if x < 0.9:
                return 0
            if x < 1.0:
                return (x - 0.9) * 10
            return min(np.exp(2 * x - 2), 10)
        for adv in communications:
            for p in range(world.dim_p):
                x = abs(adv.state.p_pos[p])
                rew -= bound(x)
        uav_pos_temp = []
        for adv in communications:
            # print("pos:",adv.state.p_pos)
            uav_pos_temp.append(adv.state.p_pos)
        self.com_uav_pos = uav_pos_temp
        return rew,whole_rew,success_sum

    def observation(self, agent, world):
        # get positions of all entities in this agent's reference frame
        entity_pos = []
        for entity in world.landmarks:
            if not entity.boundary:
                entity_pos.append(entity.state.p_pos - agent.state.p_pos)
        # communication of all other agents
        comm = []
        other_pos = []
        other_vel = []
        for other in world.agents:
            if other is agent: continue
            comm.append(other.state.c)
            other_pos.append(other.state.p_pos - agent.state.p_pos)
            if not other.communication:
                other_vel.append(other.state.p_vel)
        return np.concatenate([agent.state.p_vel] + [agent.state.p_pos] + entity_pos + other_pos + other_vel)





 